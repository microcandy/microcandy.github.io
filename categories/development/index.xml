<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>microcandy</title>
    <link>http://microcandy.github.io/categories/development/index.xml</link>
    <description>Recent content on microcandy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://microcandy.github.io/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>hugo blog工程重构</title>
      <link>http://microcandy.github.io/post/development/refactor-blog/</link>
      <pubDate>Sat, 04 Mar 2017 18:59:44 +0800</pubDate>
      
      <guid>http://microcandy.github.io/post/development/refactor-blog/</guid>
      <description>

&lt;h1 id=&#34;主题样式&#34;&gt;&lt;strong&gt;主题样式&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;相对于&lt;a href=&#34;https://github.com/jpescador/hugo-future-imperfect&#34;&gt;原版主题&lt;/a&gt;修改了不少样式，其实是删了不少：&lt;/p&gt;

&lt;p&gt;删掉了头像部分：在移动端太占地方，花里胡哨&lt;/p&gt;

&lt;p&gt;删掉每篇文章顶部的分享栏&lt;/p&gt;

&lt;p&gt;删掉左侧边栏的about栏目&lt;/p&gt;

&lt;p&gt;删掉了搜索&lt;/p&gt;

&lt;p&gt;部分&lt;del&gt;汉化&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;有一个是不少主题都有的问题：这个为例，弹出右侧菜单的时候，会有一个类似背景遮罩（&lt;code&gt;backdrop&lt;/code&gt;）的东西，监听的是&lt;code&gt;click touchend&lt;/code&gt;事件，那么在&lt;strong&gt;移动端&lt;/strong&gt;会出现，按住不放可以滑动遮罩后面的元素（这个主题的话，移动的是整个&lt;code&gt;body&lt;/code&gt;）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Body.
  // Event: Hide panel on body click/tap.
  $body.on(&#39;click touchend&#39;, function(event) {
    $this._hide(event);
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一开始打算改成监听&lt;code&gt;touchstart&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Body.
  // Event: Hide panel on body click/tap.
  $body.on(&#39;click touchstart&#39;, function(event) {
    $this._hide(event);
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看起来很美好，但是点击事件击穿了，点击遮罩，遮罩后的&lt;code&gt;a&lt;/code&gt;标签接收到了点击事件。其实也不是真正的击穿，因为事件监听本身就加在&lt;code&gt;body&lt;/code&gt;上的，而不是遮罩上。所以我把&lt;code&gt;body&lt;/code&gt;的监听移除了，直接加在了遮罩上&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  // Event: Hide panel on body click/tap.
  // $body.on(&#39;click touchstart&#39;, function(event) {
    // $this._hide(event);
  });
  $(&#39;#wrapper&#39;).on(&#39;click touchstart&#39;, function(event) {
    $this._hide(event);
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;暂时没毛病&lt;/p&gt;

&lt;h1 id=&#34;合并丑化&#34;&gt;&lt;strong&gt;合并丑化&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;工作中用的是&lt;a href=&#34;http://gulpjs.com/&#34;&gt;gulp&lt;/a&gt;（本篇封面），没用过&lt;a href=&#34;http://gruntjs.com/&#34;&gt;grunt&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;全局搜索了一下，在两个文件中分别引入了js和css文件，至于语法高亮的代码，暂时没合并进来。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;css&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在&lt;code&gt;future/layout/partials/header.html&lt;/code&gt;中&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/css/google-font.css&amp;quot; /&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/css/font-awesome.min.css&amp;quot; /&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/css/main.css&amp;quot; /&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/css/add-on.css&amp;quot; /&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/css/monokai-sublime.css&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在&lt;code&gt;future/layout/partials/footer.html&lt;/code&gt;中&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&amp;quot;/js/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/js/skel.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/js/util.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/js/main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/js/backToTop.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/js/highlight.pack.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这些&lt;code&gt;js&lt;/code&gt;文件不在&lt;code&gt;head&lt;/code&gt;标签中，而是在&lt;code&gt;body&lt;/code&gt;标签里，所以不会阻塞页面渲染。在绝大多数浏览器中都能并行下载，不过，它们必须都全部加载完才会执行，所以，这里的顺序是不能乱的，最简单的道理，库代码先于业务逻辑代码。&lt;code&gt;highlight&lt;/code&gt;是后来才引的。&lt;/p&gt;

&lt;p&gt;所以，我们合并出来的js文件，也要按这个顺序合并。这里有一个不错的gulp插件：&lt;a href=&#34;https://www.npmjs.com/package/gulp-order&#34;&gt;gulp-order&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;可以让代码在合并时遵循指定的规则&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// gulpfile.js
// 我们想要的顺序
var jsFilePath = [
  &#39;themes/future/static/js/jquery.min.js&#39;,
  &#39;themes/future/static/js/skel.min.js&#39;,
  &#39;themes/future/static/js/util.js&#39;,
  &#39;themes/future/static/js/main.js&#39;,
  &#39;themes/future/static/js/backToTop.js&#39;,
  &#39;themes/future/static/js/hightlight.pack.js&#39;
];

// 合并Js
gulp.task(&#39;js&#39;, function () {
  return gulp.src(jsFilePath)
    .pipe(order(jsFilePath, { base: &#39;./&#39; }))
    .pipe(uglify())
    .pipe(concat(&#39;script.bundle.js&#39;))
    .pipe(gulp.dest(&#39;themes/future/static/js&#39;));
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;类似的&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var cssFile = [
  &#39;themes/future/static/css/google-font.css&#39;,
  &#39;themes/future/static/css/font-awesome.min.css&#39;,
  &#39;themes/future/static/css/monokai-sublime.css&#39;,
  &#39;themes/future/static/css/main.css&#39;,
  &#39;themes/future/static/css/add-on.css&#39;
]
gulp.task(&#39;css&#39;, function () {
  return gulp.src(cssFile)
    .pipe(order(cssFile, { base: &#39;./&#39; }))
    .pipe(concat(&#39;style.bundle.css&#39;))
    .pipe(minifyCss())
    .pipe(gulp.dest(&#39;themes/future/static/css&#39;));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后不要忘记引入&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- css --&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/css/style.bundle.css&amp;quot; /&amp;gt;
&amp;lt;!--&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/css/google-font.css&amp;quot; /&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/css/font-awesome.min.css&amp;quot; /&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/css/main.css&amp;quot; /&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/css/add-on.css&amp;quot; /&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/css/monokai-sublime.css&amp;quot;&amp;gt;--&amp;gt;

&amp;lt;!-- js --&amp;gt;
&amp;lt;script src=&amp;quot;/js/script.bundle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;!--&amp;lt;script src=&amp;quot;/js/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/js/skel.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/js/util.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/js/main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/js/backToTop.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/js/highlight.pack.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;大概就干了这么些，可以安心写文了&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>搭建静态博客：hugo &amp; github pages</title>
      <link>http://microcandy.github.io/post/development/how-to-hugo/</link>
      <pubDate>Mon, 16 May 2016 00:44:25 +0800</pubDate>
      
      <guid>http://microcandy.github.io/post/development/how-to-hugo/</guid>
      <description>

&lt;h1 id=&#34;hugo安装与使用&#34;&gt;hugo安装与使用&lt;/h1&gt;

&lt;p&gt;参照&lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;Getting Started&lt;/a&gt;进行（Windows7）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;安装&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Save the main executable as &lt;strong&gt;hugo&lt;/strong&gt; (or &lt;strong&gt;hugo.exe&lt;/strong&gt; on Windows) somewhere in your &lt;strong&gt;PATH&lt;/strong&gt; as we will be using it in the next step.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;把下载好的hugo.exe随便放个地方，并且添加到Path中。我的电脑-右键-属性-高级系统设置-环境变量中进行添加。&lt;/p&gt;

&lt;p&gt;Mac OS 则用&lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;来安装hugo，速度还可以&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ brew update
$ brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创建一个网站&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ hugo new site blog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;项目结构具体说明看官网的&lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;Getting Started&lt;/a&gt;，生成的目录中主要用到static、content、config.toml，后续会使用网站主题&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;config.toml&lt;/strong&gt;: Every website should have a configuration file at the root.&lt;br /&gt;
&lt;strong&gt;content&lt;/strong&gt;: This is where you will store content of the website. Inside content, you will create sub-directories for different sections.&lt;br /&gt;
&lt;strong&gt;static&lt;/strong&gt;: This directory is used to store all the static content that your website will need like images, CSS, JavaScript or other static content.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;添加新内容&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;创建命令&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ hugo new post/how-to-hugo.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;期望的输出&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;xxxx/content/post/how-to-hugo.md created
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;Getting Started&lt;/a&gt;&lt;strong&gt;中提醒到：&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Make sure you are inside your website directory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;那么这个how-to-hugo.md默认应该差不多这个样子（如果使用了主题的话可能会有出入）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2016-05-16T00:44:25+08:00&amp;quot;
draft = true
title = &amp;quot;how to hugo&amp;quot;

+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后就可以写这篇文章了。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;运行&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;hugo内置了一个服务器使得我们可以在&lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt; 预览我们的网站&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hugo has an inbuilt server that can serve your website content so that you can preview it.&lt;br /&gt;
This will start the server on port 1313. You can view your blog at &lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ hugo server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;期望中的结果是没有任何输出。因为我们新建的how-to-hugo.md是一篇草稿&lt;code&gt;raft = true&lt;/code&gt;，可以考虑设置为false（推荐），或者&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To render drafts, re-run the server with command shown below.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ hugo server --buildDrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用主题&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为什么要使用主题？（本着不重复造轮子的理念、不会写前端、懒&amp;hellip;）&lt;/p&gt;

&lt;p&gt;好吧，官方这说的很有道理&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hugo currently doesn’t ship with a &lt;strong&gt;default&lt;/strong&gt; theme, allowing the user to pick whichever theme best suits their project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在&lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;hugo主题&lt;/a&gt;里挑选喜欢的主题，点击【DEMO】可以看到预览，之后点击【HOMEPAGE】可以前往托管在Github的主题，把它下下来。&lt;/p&gt;

&lt;p&gt;主题下好之后解压然后重命名成一个较短的新名字（后面本地预览时要输入主题的文件名），放在项目根目录下themes文件夹中（新建一个），之后预览带主题的网站效果。（也可以参照&lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;Getting Started&lt;/a&gt;里面用Git命令clone主题）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ hugo server --theme=theme-name --buildDrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;打包&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;So far all the posts that we have written are in draft status. To make a draft public, you can either run a command or manually change the draft status in the post to True.&lt;br /&gt;
$ hugo undraft content/post/good-to-great.md&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;噢？网页还是草稿&lt;code&gt;draft = true&lt;/code&gt;？用命令行去解决吧~&lt;/p&gt;

&lt;p&gt;看起来挺麻烦，开文件手改吧。&lt;/p&gt;

&lt;p&gt;现在它已经不是草稿了，可以不用&lt;code&gt;--buildDrafts&lt;/code&gt;了。（记得带上主题）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ hugo server --theme=theme-name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;静态博客生成了，你可以放到自己的私人服务器上了，什么？没有？往下看。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;部署&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;部署到Github Pages上。&lt;/p&gt;

&lt;p&gt;先创建一个Repository，名为yourGithubID.github.io&lt;/p&gt;

&lt;p&gt;之后打包我们的网站，生成命令就是去掉&lt;code&gt;server&lt;/code&gt;参数&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ hugo --theme=theme-name --baseUrl=http://yourGithubID.github.io/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后会在项目根目录下生成一个public文件夹&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;After you run the hugo command, a public directory will be created with the generated website source.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;运行Git Shell，进入这个public目录下，将目录下所有文件push到刚创建的Repository的master分支（也可以考虑参照&lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;Getting Started&lt;/a&gt;新建一个分支）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd public
$ git init
$ git remote add origin https://github.com/yourGithubID/yourGithubID.github.io.git
$ git add -A
$ git commit -m &amp;quot;first commit&amp;quot;
$ git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不出意外的话，&lt;code&gt;http://yourGithubID.github.io/&lt;/code&gt; 这就是成果了。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;代码高亮&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果是&lt;del&gt;技术&lt;/del&gt;博客，可以考虑使用代码高亮插件，官网&lt;a href=&#34;https://highlightjs.org/&#34;&gt;点这里&lt;/a&gt;，选则需要的高亮语言然后下载。&lt;/p&gt;

&lt;p&gt;根据hugo&lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;Getting Started&lt;/a&gt;的意思，这东西应该放在static目录下，假设放在static/highlight下。&lt;/p&gt;

&lt;p&gt;最直接的使用方法就是（见highlight/README.MD）&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The bare minimum for using highlight.js on a web page is linking to the library along with one of the styles and calling &lt;em&gt;initHighlightingOnLoad&lt;/em&gt;:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/path/to/styles/default.css&amp;quot;&amp;gt;
&amp;lt;script src=&amp;quot;/path/to/highlight.pack.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;hljs.initHighlightingOnLoad();&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们刚刚假设我们的高亮插件放在static/highlight下，那么path/to应该换成highlight&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/highlight/styles/default.css&amp;quot;&amp;gt;
&amp;lt;script src=&amp;quot;/highlight/highlight.pack.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;hljs.initHighlightingOnLoad();&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么在贴代码时指定语言即可&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;    ```html  
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/highlight/styles/default.css&amp;quot;&amp;gt;  
    ```  
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;评论&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;许多主题都提供了&lt;a href=&#34;https://disqus.com/&#34;&gt;Disqus&lt;/a&gt;评论模块的接口，只需要申请帐号并且设置一下就可以使用了。提供的都是国外的社交软件，所以就放弃了。这里使用&lt;a href=&#34;http://www.uyan.cc/&#34;&gt;友言&lt;/a&gt;评论系统。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.uyan.cc/&#34;&gt;友言&lt;/a&gt;不能在本地预览中使用，只有部署到Github Pages之后才能正常使用。&lt;/p&gt;

&lt;p&gt;在&lt;a href=&#34;http://www.uyan.cc/&#34;&gt;友言&lt;/a&gt;注册后直接选择获取代码-通用代码，会得到形如下面的一段代码，放在需要放的地方&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div id=&amp;quot;uyan_frame&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;http://v2.uyan.cc/code/uyan.js?uid=一串数字&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;之后的事&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;之后就是如何好好使用主题的问题了，只能参照主题给的sample或者文档来弄了。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>